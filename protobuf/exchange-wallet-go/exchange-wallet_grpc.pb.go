// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protobuf/exchange-wallet.proto

package exchange_wallet_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletBusinessServices_BusinessRegister_FullMethodName          = "/syncs.WalletBusinessServices/businessRegister"
	WalletBusinessServices_ExportAddressByPublicKeys_FullMethodName = "/syncs.WalletBusinessServices/exportAddressByPublicKeys"
	WalletBusinessServices_BuildUnSignTransaction_FullMethodName    = "/syncs.WalletBusinessServices/buildUnSignTransaction"
	WalletBusinessServices_BuildSignedTransaction_FullMethodName    = "/syncs.WalletBusinessServices/buildSignedTransaction"
	WalletBusinessServices_SetTokenAddress_FullMethodName           = "/syncs.WalletBusinessServices/setTokenAddress"
)

// WalletBusinessServicesClient is the client API for WalletBusinessServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletBusinessServicesClient interface {
	// 业务方注册
	BusinessRegister(ctx context.Context, in *BusinessRegisterRequest, opts ...grpc.CallOption) (*BusinessRegisterResponse, error)
	// 公钥导出
	ExportAddressByPublicKeys(ctx context.Context, in *ExportAddressRequest, opts ...grpc.CallOption) (*ExportAddressResponse, error)
	// 构建未签名交易
	BuildUnSignTransaction(ctx context.Context, in *UnSignTransactionRequest, opts ...grpc.CallOption) (*UnSignTransactionResponse, error)
	// 构建已签名交易
	BuildSignedTransaction(ctx context.Context, in *SignedTransactionRequest, opts ...grpc.CallOption) (*SignedTransactionResponse, error)
	// 设置 token 地址
	SetTokenAddress(ctx context.Context, in *SetTokenAddressRequest, opts ...grpc.CallOption) (*SetTokenAddressResponse, error)
}

type walletBusinessServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletBusinessServicesClient(cc grpc.ClientConnInterface) WalletBusinessServicesClient {
	return &walletBusinessServicesClient{cc}
}

func (c *walletBusinessServicesClient) BusinessRegister(ctx context.Context, in *BusinessRegisterRequest, opts ...grpc.CallOption) (*BusinessRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusinessRegisterResponse)
	err := c.cc.Invoke(ctx, WalletBusinessServices_BusinessRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletBusinessServicesClient) ExportAddressByPublicKeys(ctx context.Context, in *ExportAddressRequest, opts ...grpc.CallOption) (*ExportAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportAddressResponse)
	err := c.cc.Invoke(ctx, WalletBusinessServices_ExportAddressByPublicKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletBusinessServicesClient) BuildUnSignTransaction(ctx context.Context, in *UnSignTransactionRequest, opts ...grpc.CallOption) (*UnSignTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnSignTransactionResponse)
	err := c.cc.Invoke(ctx, WalletBusinessServices_BuildUnSignTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletBusinessServicesClient) BuildSignedTransaction(ctx context.Context, in *SignedTransactionRequest, opts ...grpc.CallOption) (*SignedTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedTransactionResponse)
	err := c.cc.Invoke(ctx, WalletBusinessServices_BuildSignedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletBusinessServicesClient) SetTokenAddress(ctx context.Context, in *SetTokenAddressRequest, opts ...grpc.CallOption) (*SetTokenAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTokenAddressResponse)
	err := c.cc.Invoke(ctx, WalletBusinessServices_SetTokenAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletBusinessServicesServer is the server API for WalletBusinessServices service.
// All implementations should embed UnimplementedWalletBusinessServicesServer
// for forward compatibility.
type WalletBusinessServicesServer interface {
	// 业务方注册
	BusinessRegister(context.Context, *BusinessRegisterRequest) (*BusinessRegisterResponse, error)
	// 公钥导出
	ExportAddressByPublicKeys(context.Context, *ExportAddressRequest) (*ExportAddressResponse, error)
	// 构建未签名交易
	BuildUnSignTransaction(context.Context, *UnSignTransactionRequest) (*UnSignTransactionResponse, error)
	// 构建已签名交易
	BuildSignedTransaction(context.Context, *SignedTransactionRequest) (*SignedTransactionResponse, error)
	// 设置 token 地址
	SetTokenAddress(context.Context, *SetTokenAddressRequest) (*SetTokenAddressResponse, error)
}

// UnimplementedWalletBusinessServicesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletBusinessServicesServer struct{}

func (UnimplementedWalletBusinessServicesServer) BusinessRegister(context.Context, *BusinessRegisterRequest) (*BusinessRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessRegister not implemented")
}
func (UnimplementedWalletBusinessServicesServer) ExportAddressByPublicKeys(context.Context, *ExportAddressRequest) (*ExportAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAddressByPublicKeys not implemented")
}
func (UnimplementedWalletBusinessServicesServer) BuildUnSignTransaction(context.Context, *UnSignTransactionRequest) (*UnSignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildUnSignTransaction not implemented")
}
func (UnimplementedWalletBusinessServicesServer) BuildSignedTransaction(context.Context, *SignedTransactionRequest) (*SignedTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSignedTransaction not implemented")
}
func (UnimplementedWalletBusinessServicesServer) SetTokenAddress(context.Context, *SetTokenAddressRequest) (*SetTokenAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTokenAddress not implemented")
}
func (UnimplementedWalletBusinessServicesServer) testEmbeddedByValue() {}

// UnsafeWalletBusinessServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletBusinessServicesServer will
// result in compilation errors.
type UnsafeWalletBusinessServicesServer interface {
	mustEmbedUnimplementedWalletBusinessServicesServer()
}

func RegisterWalletBusinessServicesServer(s grpc.ServiceRegistrar, srv WalletBusinessServicesServer) {
	// If the following call pancis, it indicates UnimplementedWalletBusinessServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletBusinessServices_ServiceDesc, srv)
}

func _WalletBusinessServices_BusinessRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletBusinessServicesServer).BusinessRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletBusinessServices_BusinessRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletBusinessServicesServer).BusinessRegister(ctx, req.(*BusinessRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletBusinessServices_ExportAddressByPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletBusinessServicesServer).ExportAddressByPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletBusinessServices_ExportAddressByPublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletBusinessServicesServer).ExportAddressByPublicKeys(ctx, req.(*ExportAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletBusinessServices_BuildUnSignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletBusinessServicesServer).BuildUnSignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletBusinessServices_BuildUnSignTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletBusinessServicesServer).BuildUnSignTransaction(ctx, req.(*UnSignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletBusinessServices_BuildSignedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletBusinessServicesServer).BuildSignedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletBusinessServices_BuildSignedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletBusinessServicesServer).BuildSignedTransaction(ctx, req.(*SignedTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletBusinessServices_SetTokenAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTokenAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletBusinessServicesServer).SetTokenAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletBusinessServices_SetTokenAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletBusinessServicesServer).SetTokenAddress(ctx, req.(*SetTokenAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletBusinessServices_ServiceDesc is the grpc.ServiceDesc for WalletBusinessServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletBusinessServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncs.WalletBusinessServices",
	HandlerType: (*WalletBusinessServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "businessRegister",
			Handler:    _WalletBusinessServices_BusinessRegister_Handler,
		},
		{
			MethodName: "exportAddressByPublicKeys",
			Handler:    _WalletBusinessServices_ExportAddressByPublicKeys_Handler,
		},
		{
			MethodName: "buildUnSignTransaction",
			Handler:    _WalletBusinessServices_BuildUnSignTransaction_Handler,
		},
		{
			MethodName: "buildSignedTransaction",
			Handler:    _WalletBusinessServices_BuildSignedTransaction_Handler,
		},
		{
			MethodName: "setTokenAddress",
			Handler:    _WalletBusinessServices_SetTokenAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/exchange-wallet.proto",
}
